name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  workflow_dispatch: 

jobs:

  deploy:
    runs-on: ubuntu-latest
    
    env:
      VERSION: ${{ github.sha }}
      CONTAINER_REGISTRY: ${{ secrets.CONTAINER_REGISTRY }}
      REGISTRY_UN: ${{ secrets.REGISTRY_UN }}
      REGISTRY_PW: ${{ secrets.REGISTRY_PW  }}

    steps:
      
      # Checks-out your repository under $GITHUB_WORKSPACE.
      - uses: actions/checkout@v3

      #
      # Builds the Docker image.
      #
      - name: Build
        run: ./scripts/build-image.sh

      #
      # Publishes the Docker image to the container registry.
      #
      - name: Publish
        run: ./scripts/push-image.sh

      #
      # Installs Kubectl and connects it to the cluster.
      #
      # https://github.com/marketplace/actions/kubernetes-cli-kubectl
      #
      - uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}
          kubectl-version: v1.24.2
      
      #
      # Expands the configuration template and deploys the microservice.
      #
      - name: Deploy
        run: ./scripts/deploy.sh

# jobs:
#   build_and_deploy:
#     runs-on: ubuntu-latest

#     steps:
#     # Step 1: Checkout the repository
#     - name: Checkout code
#       uses: actions/checkout@v2

#     # Step 2: Set up Docker (if using Docker for image builds)
#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v1

#     # Step 3: Log in to Azure Container Registry
#     - name: Log in to ACR
#       uses: azure/docker-login@v1
#       with:
#         login-server: <ACR_LOGIN_SERVER>
#         username: ${{ secrets.AZURE_CLIENT_ID }}
#         password: ${{ secrets.AZURE_CLIENT_SECRET }}

#     # Step 4: Build and push Docker images
#     - name: Build and Push Docker Images
#       run: |
#         docker-compose -f docker-compose.yml build
#         docker-compose -f docker-compose.yml push

#     # Step 5: Set up Terraform
#     - name: Set up Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         terraform_version: 1.0.0

#     # Step 6: Terraform Init
#     - name: Terraform Init
#       working-directory: ./terraform
#       run: terraform init

#     # Step 7: Terraform Plan
#     - name: Terraform Plan
#       working-directory: ./terraform
#       run: terraform plan

#     # Step 8: Terraform Apply
#     - name: Terraform Apply
#       working-directory: ./terraform
#       run: terraform apply -auto-approve

#     # Optional: Notify on Success
#     - name: Notify Deployment Success
#       run: echo "Deployment completed successfully!"
